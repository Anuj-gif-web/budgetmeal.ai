@page "/recipes"
@inject LocalStorageService Storage
@inject HttpClient Http

<div class="recipes-page">
  <div class="recipes-hero">
    <div class="hero-text">
      <h1 tabindex="0">Your Personalized Meal Plan</h1>
      <p>Based on your pantry &amp; budget</p>
    </div>
    <button class="btn-action" @onclick="GenerateMealPlan" disabled="@isGenerating">
      <span class="oi oi-magic-wand me-1"></span>
      @(isGenerating ? "Generating..." : "Generate Plan")
    </button>
  </div>

  @if (!loaded)
  {
    <div class="recipes-loading">
      <span class="oi oi-loop-circular spin" aria-hidden="true"></span>
    </div>
  }
  else if (pantryItems.Count == 0 || weeklyBudget == 0)
  {
    <div class="alert alert-warning recipes-alert">
      Please add pantry items and set your budget before generating a meal plan.
    </div>
  }
  else
  {
    <div class="plan-details">
      <div><strong>Budget:</strong> $@weeklyBudget</div>
      <div><strong>Diet:</strong> @dietType</div>
      <div><strong>Pantry:</strong> @string.Join(", ", pantryItems)</div>
    </div>

    @if (hasGenerated && mockRecipes.Count > 0)
    {
      <div class="recipes-grid">
        @foreach (var recipe in mockRecipes)
        {
          <div class="recipe-card">
            <h3>@recipe.Title</h3>
            <p class="cost">$@recipe.Cost</p>
            <ul>
              @foreach (var ing in recipe.Ingredients)
              {
                <li>@ing</li>
              }
            </ul>
          </div>
        }
      </div>
    }
  }
</div>

@code {
    private decimal weeklyBudget;
    private string dietType = "";
    private List<string> pantryItems = new();
    private bool loaded = false;
    private bool isGenerating = false;
    private bool hasGenerated = false;
    private List<Recipe> mockRecipes = new();

    protected override async Task OnInitializedAsync()
    {
        var budgetData = await Storage.LoadAsync<BudgetData>("budgetPrefs");
        var pantryData = await Storage.LoadAsync<List<string>>("pantryItems");

        if (budgetData is not null)
        {
            weeklyBudget = budgetData.Budget;
            dietType = budgetData.Diet;
        }

        if (pantryData is not null)
        {
            pantryItems = pantryData;
        }

        loaded = true;
    }

    private async Task GenerateMealPlan()
    {
        isGenerating = true;
        hasGenerated = false;
        mockRecipes.Clear();

        var request = new
        {
            budget = weeklyBudget,
            diet = dietType,
            pantry = pantryItems
        };

        try
        {
            var response = await Http.PostAsJsonAsync("generate-meal-plan", request);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<Recipe>>();
                if (data != null)
                    mockRecipes = data;
            }
        }
        catch { /* handle errors */ }

        isGenerating = false;
        hasGenerated = true;
    }

    private class Recipe
    {
        public string Title { get; set; } = "";
        public List<string> Ingredients { get; set; } = new();
        public decimal Cost { get; set; }
    }
    private class BudgetData { public decimal Budget { get; set; } public string Diet { get; set; } = ""; }
}
